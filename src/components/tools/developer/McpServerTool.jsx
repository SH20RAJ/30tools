'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Download, Server, Copy, Check, Code, Settings, PlayCircle } from 'lucide-react'
import { toast } from 'sonner'

export default function McpServerTool() {
  const [serverName, setServerName] = useState('')
  const [serverDescription, setServerDescription] = useState('')
  const [language, setLanguage] = useState('typescript')
  const [includeAuth, setIncludeAuth] = useState('false')
  const [includeCors, setIncludeCors] = useState('true')
  const [port, setPort] = useState('3000')
  const [generatedCode, setGeneratedCode] = useState('')
  const [copied, setCopied] = useState(false)

  const generateMcpServer = () => {
    if (!serverName.trim()) {
      toast.error("Please enter a name for your MCP server")
      return
    }

    const timestamp = new Date().toISOString()
    let code = ''

    if (language === 'typescript') {
      code = `// ${serverName} - Model Context Protocol (MCP) Server
// Generated by 30tools.com MCP Server Generator
// Date: ${timestamp}

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';

// Server configuration
const server = new Server(
  {
    name: '${serverName}',
    version: '0.1.0',
  },
  {
    capabilities: {
      tools: {},
      ${includeCors === 'true' ? 'cors: true,' : ''}
    },
  }
);

// Tool definitions
const TOOLS = [
  {
    name: 'example-tool',
    description: '${serverDescription || 'Example tool for your MCP server'}',
    inputSchema: {
      type: 'object',
      properties: {
        input: {
          type: 'string',
          description: 'Input parameter for the tool',
        },
      },
      required: ['input'],
    },
  },
];

// List tools handler
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: TOOLS,
  };
});

// Call tool handler
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  switch (name) {
    case 'example-tool':
      try {
        const result = await handleExampleTool(args.input);
        return {
          content: [{ type: 'text', text: result }],
        };
      } catch (error) {
        throw new McpError(
          ErrorCode.InternalError,
          \`Tool execution failed: \${error.message}\`
        );
      }

    default:
      throw new McpError(
        ErrorCode.MethodNotFound,
        \`Unknown tool: \${name}\`
      );
  }
});

// Tool implementation
async function handleExampleTool(input: string): Promise<string> {
  // Implement your tool logic here
  return \`Processed: \${input}\`;
}

${includeAuth === 'true' ? `
// Authentication middleware (optional)
function authenticate(token: string): boolean {
  // Implement your authentication logic
  return token === process.env.MCP_AUTH_TOKEN;
}
` : ''}

// Start the server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.log('${serverName} MCP server running on stdio');
}

main().catch((error) => {
  console.error('Server failed to start:', error);
  process.exit(1);
});

export { server };`
    } else if (language === 'javascript') {
      code = `// ${serverName} - Model Context Protocol (MCP) Server
// Generated by 30tools.com MCP Server Generator
// Date: ${timestamp}

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
const {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} = require('@modelcontextprotocol/sdk/types.js');

// Server configuration
const server = new Server(
  {
    name: '${serverName}',
    version: '0.1.0',
  },
  {
    capabilities: {
      tools: {},
      ${includeCors === 'true' ? 'cors: true,' : ''}
    },
  }
);

// Tool definitions
const TOOLS = [
  {
    name: 'example-tool',
    description: '${serverDescription || 'Example tool for your MCP server'}',
    inputSchema: {
      type: 'object',
      properties: {
        input: {
          type: 'string',
          description: 'Input parameter for the tool',
        },
      },
      required: ['input'],
    },
  },
];

// List tools handler
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: TOOLS,
  };
});

// Call tool handler
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  switch (name) {
    case 'example-tool':
      try {
        const result = await handleExampleTool(args.input);
        return {
          content: [{ type: 'text', text: result }],
        };
      } catch (error) {
        throw new McpError(
          ErrorCode.InternalError,
          \`Tool execution failed: \${error.message}\`
        );
      }

    default:
      throw new McpError(
        ErrorCode.MethodNotFound,
        \`Unknown tool: \${name}\`
      );
  }
});

// Tool implementation
async function handleExampleTool(input) {
  // Implement your tool logic here
  return \`Processed: \${input}\`;
}

${includeAuth === 'true' ? `
// Authentication middleware (optional)
function authenticate(token) {
  // Implement your authentication logic
  return token === process.env.MCP_AUTH_TOKEN;
}
` : ''}

// Start the server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.log('${serverName} MCP server running on stdio');
}

main().catch((error) => {
  console.error('Server failed to start:', error);
  process.exit(1);
});

module.exports = { server };`
    } else if (language === 'python') {
      code = `# ${serverName} - Model Context Protocol (MCP) Server
# Generated by 30tools.com MCP Server Generator
# Date: ${timestamp}

import asyncio
import logging
from typing import Any, Sequence

from mcp.server.models import InitializationOptions
from mcp.server.server import NotificationOptions, Server
from mcp.server.stdio import stdio_server
from mcp.types import (
    CallToolRequest,
    CallToolResult,
    ListToolsRequest,
    ListToolsResult,
    TextContent,
    Tool,
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("${serverName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase()}")

# Server instance
server = Server("${serverName}")

# Tool definitions
TOOLS = [
    Tool(
        name="example-tool",
        description="${serverDescription || 'Example tool for your MCP server'}",
        inputSchema={
            "type": "object",
            "properties": {
                "input": {
                    "type": "string",
                    "description": "Input parameter for the tool",
                }
            },
            "required": ["input"],
        },
    )
]

@server.list_tools()
async def handle_list_tools() -> ListToolsResult:
    """List available tools."""
    return ListToolsResult(tools=TOOLS)

@server.call_tool()
async def handle_call_tool(request: CallToolRequest) -> CallToolResult:
    """Handle tool calls."""
    tool_name = request.params.name
    arguments = request.params.arguments or {}
    
    if tool_name == "example-tool":
        try:
            result = await handle_example_tool(arguments.get("input", ""))
            return CallToolResult(
                content=[TextContent(type="text", text=result)]
            )
        except Exception as e:
            logger.error(f"Tool execution failed: {e}")
            return CallToolResult(
                content=[TextContent(type="text", text=f"Error: {str(e)}")]
            )
    else:
        raise ValueError(f"Unknown tool: {tool_name}")

async def handle_example_tool(input_text: str) -> str:
    """Example tool implementation."""
    # Implement your tool logic here
    return f"Processed: {input_text}"

${includeAuth === 'true' ? `
def authenticate(token: str) -> bool:
    """Authentication middleware (optional)."""
    import os
    return token == os.getenv("MCP_AUTH_TOKEN")
` : ''}

async def main():
    """Main server entry point."""
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="${serverName}",
                server_version="0.1.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )

if __name__ == "__main__":
    asyncio.run(main())`
    }

    setGeneratedCode(code)
    toast.success("Your Model Context Protocol server code has been generated successfully")
  }

  const downloadCode = () => {
    if (!generatedCode) return

    const fileExtension = language === 'python' ? 'py' : language === 'javascript' ? 'js' : 'ts'
    const fileName = `${serverName.toLowerCase().replace(/[^a-z0-9]/g, '-')}-mcp-server.${fileExtension}`
    
    const blob = new Blob([generatedCode], { type: 'text/plain' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = fileName
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    window.URL.revokeObjectURL(url)
    
    toast.success(`MCP server code downloaded as ${fileName}`)
  }

  const copyCode = async () => {
    if (!generatedCode) return

    try {
      await navigator.clipboard.writeText(generatedCode)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
      toast.success("MCP server code copied successfully")
    } catch (error) {
      toast.error("Failed to copy code to clipboard")
    }
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-2 mb-4">
          <Server className="h-8 w-8 text-primary" />
          <h1 className="text-3xl font-bold">MCP Server Generator</h1>
        </div>
        <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
          Generate ready-to-use Model Context Protocol (MCP) servers for Claude and other AI assistants. 
          Perfect for #21stdev developers building custom AI tools and integrations.
        </p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="h-5 w-5" />
              Server Configuration
            </CardTitle>
            <CardDescription>
              Configure your Model Context Protocol server settings
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="serverName">Server Name *</Label>
              <Input
                id="serverName"
                value={serverName}
                onChange={(e) => setServerName(e.target.value)}
                placeholder="my-awesome-mcp-server"
                className="mt-1"
              />
            </div>

            <div>
              <Label htmlFor="serverDescription">Server Description</Label>
              <Textarea
                id="serverDescription"
                value={serverDescription}
                onChange={(e) => setServerDescription(e.target.value)}
                placeholder="Describe what your MCP server does..."
                className="mt-1"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="language">Programming Language</Label>
                <Select value={language} onValueChange={setLanguage}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="typescript">TypeScript</SelectItem>
                    <SelectItem value="javascript">JavaScript</SelectItem>
                    <SelectItem value="python">Python</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="port">Default Port</Label>
                <Input
                  id="port"
                  value={port}
                  onChange={(e) => setPort(e.target.value)}
                  placeholder="3000"
                  className="mt-1"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="includeAuth">Include Authentication</Label>
                <Select value={includeAuth} onValueChange={setIncludeAuth}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="false">No</SelectItem>
                    <SelectItem value="true">Yes</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="includeCors">Enable CORS</Label>
                <Select value={includeCors} onValueChange={setIncludeCors}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="true">Yes</SelectItem>
                    <SelectItem value="false">No</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <Button 
              onClick={generateMcpServer}
              disabled={!serverName.trim()}
              className="w-full"
            >
              <Code className="h-4 w-4 mr-2" />
              Generate MCP Server
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Generated Code</CardTitle>
            <CardDescription>
              Your MCP server implementation will appear here
            </CardDescription>
          </CardHeader>
          <CardContent>
            {generatedCode ? (
              <div className="space-y-4">
                <div className="bg-muted rounded-lg p-4 max-h-96 overflow-auto">
                  <pre className="text-sm">
                    <code>{generatedCode}</code>
                  </pre>
                </div>
                
                <div className="flex flex-wrap gap-2">
                  <Button onClick={downloadCode} variant="outline" size="sm">
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                  <Button onClick={copyCode} variant="outline" size="sm">
                    {copied ? (
                      <Check className="h-4 w-4 mr-2" />
                    ) : (
                      <Copy className="h-4 w-4 mr-2" />
                    )}
                    {copied ? 'Copied!' : 'Copy Code'}
                  </Button>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-64 bg-muted rounded-lg">
                <div className="text-center text-muted-foreground">
                  <Code className="h-12 w-12 mx-auto mb-2" />
                  <p>Your MCP server code will appear here</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* SEO Content Section */}
      <div className="mt-12 space-y-8">
        <Card>
          <CardHeader>
            <CardTitle>About Model Context Protocol (MCP) Servers</CardTitle>
          </CardHeader>
          <CardContent className="prose max-w-none space-y-6">
            <p>
              The Model Context Protocol (MCP) is Anthropic's open standard for connecting AI assistants like Claude 
              to external data sources and tools. MCP servers enable developers to build custom integrations that 
              extend AI capabilities with real-time data access, API integrations, and specialized functionality.
            </p>

            <div>
              <h3 className="text-xl font-semibold mb-3">What is MCP?</h3>
              <p>
                MCP (Model Context Protocol) is an open-source protocol developed by Anthropic that enables 
                secure connections between AI assistants and external data sources. It's designed to give 
                AI systems controlled access to relevant context and tools while maintaining security and user control.
              </p>
            </div>

            <div>
              <h3 className="text-xl font-semibold mb-3">Key MCP Features:</h3>
              <ul className="list-disc pl-6 space-y-2">
                <li><strong>Standardized Protocol:</strong> Universal standard for AI-tool integration</li>
                <li><strong>Secure Architecture:</strong> Built-in security and permissions model</li>
                <li><strong>Tool Integration:</strong> Connect AI to databases, APIs, and services</li>
                <li><strong>Context Providers:</strong> Supply relevant context to AI conversations</li>
                <li><strong>Real-time Data:</strong> Access live data and dynamic content</li>
                <li><strong>Developer Friendly:</strong> Easy-to-use SDK and comprehensive documentation</li>
              </ul>
            </div>

            <div>
              <h3 className="text-xl font-semibold mb-3">MCP Use Cases:</h3>
              <ul className="list-disc pl-6 space-y-2">
                <li>Database query and management tools</li>
                <li>API integrations and webhook handlers</li>
                <li>File system access and manipulation</li>
                <li>Cloud service integrations (AWS, GCP, Azure)</li>
                <li>Development tools and CI/CD pipelines</li>
                <li>Business application connectors</li>
                <li>Custom data processing workflows</li>
                <li>Real-time monitoring and alerting systems</li>
              </ul>
            </div>

            <div>
              <h3 className="text-xl font-semibold mb-3">Getting Started with MCP:</h3>
              <ol className="list-decimal pl-6 space-y-2">
                <li>Generate your MCP server using our tool above</li>
                <li>Install the MCP SDK: <code className="bg-muted px-2 py-1 rounded">npm install @modelcontextprotocol/sdk</code></li>
                <li>Implement your custom tools and functionality</li>
                <li>Test your server with the MCP inspector</li>
                <li>Configure Claude Desktop to use your MCP server</li>
                <li>Deploy and scale your MCP integration</li>
              </ol>
            </div>

            <div className="bg-blue-50 dark:bg-blue-950/20 p-6 rounded-lg">
              <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
                Perfect for #21stdev Developers
              </h4>
              <p className="text-blue-800 dark:text-blue-200">
                MCP servers are essential tools for modern developers building AI-first applications. 
                Join the #21stdev movement and create powerful AI integrations that bridge the gap 
                between artificial intelligence and real-world data.
              </p>
            </div>

            <div>
              <h3 className="text-xl font-semibold mb-3">MCP Server Architecture:</h3>
              <p>
                MCP servers communicate with AI clients through a standardized JSON-RPC protocol. 
                They can provide tools (functions the AI can call), resources (data the AI can access), 
                and prompts (templates for common interactions). Our generator creates a fully 
                functional server with example implementations that you can customize for your needs.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
