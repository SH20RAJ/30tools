'use client';

import { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { ArrowLeftIcon, CopyIcon, DownloadIcon, RefreshCwIcon, TypeIcon, ClockIcon, HashIcon, AlignJustifyIcon, FileTextIcon } from 'lucide-react';
import Link from 'next/link';

export default function WordCounterTool() {
  const [text, setText] = useState('');
  const [copied, setCopied] = useState(false);

  // Real-time text analysis
  const stats = useMemo(() => {
    const trimmedText = text.trim();
    
    // Word count (split by whitespace and filter empty strings)
    const words = trimmedText ? trimmedText.split(/\s+/).filter(word => word.length > 0) : [];
    const wordCount = words.length;
    
    // Character counts
    const charactersWithSpaces = text.length;
    const charactersWithoutSpaces = text.replace(/\s/g, '').length;
    
    // Sentence count (split by sentence-ending punctuation)
    const sentences = trimmedText ? trimmedText.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0) : [];
    const sentenceCount = sentences.length;
    
    // Paragraph count (split by double line breaks)
    const paragraphs = trimmedText ? trimmedText.split(/\n\s*\n/).filter(paragraph => paragraph.trim().length > 0) : [];
    const paragraphCount = paragraphs.length;
    
    // Reading time estimation (average 200 words per minute)
    const readingTimeMinutes = Math.ceil(wordCount / 200);
    const readingTimeSeconds = Math.ceil((wordCount / 200) * 60);
    
    // Speaking time estimation (average 125 words per minute)
    const speakingTimeMinutes = Math.ceil(wordCount / 125);
    
    // Average words per sentence
    const avgWordsPerSentence = sentenceCount > 0 ? Math.round(wordCount / sentenceCount) : 0;
    
    // Average characters per word
    const avgCharsPerWord = wordCount > 0 ? Math.round(charactersWithoutSpaces / wordCount) : 0;
    
    return {
      wordCount,
      charactersWithSpaces,
      charactersWithoutSpaces,
      sentenceCount,
      paragraphCount,
      readingTimeMinutes,
      readingTimeSeconds,
      speakingTimeMinutes,
      avgWordsPerSentence,
      avgCharsPerWord,
      mostCommonWords: getMostCommonWords(words)
    };
  }, [text]);

  // Get most common words
  function getMostCommonWords(words) {
    const wordFreq = {};
    const commonWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'can', 'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they']);
    
    words.forEach(word => {
      const cleanWord = word.toLowerCase().replace(/[^\w]/g, '');
      if (cleanWord.length > 2 && !commonWords.has(cleanWord)) {
        wordFreq[cleanWord] = (wordFreq[cleanWord] || 0) + 1;
      }
    });
    
    return Object.entries(wordFreq)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([word, count]) => ({ word, count }));
  }

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const downloadAsText = () => {
    const element = document.createElement('a');
    const file = new Blob([text], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = 'text-analysis.txt';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const downloadStats = () => {
    const statsText = `Text Analysis Report
Generated by 30tools.com Word Counter

=== BASIC STATISTICS ===
Words: ${stats.wordCount}
Characters (with spaces): ${stats.charactersWithSpaces}
Characters (without spaces): ${stats.charactersWithoutSpaces}
Sentences: ${stats.sentenceCount}
Paragraphs: ${stats.paragraphCount}

=== READING & SPEAKING TIME ===
Reading time: ${stats.readingTimeMinutes} minute(s)
Speaking time: ${stats.speakingTimeMinutes} minute(s)

=== ADVANCED STATISTICS ===
Average words per sentence: ${stats.avgWordsPerSentence}
Average characters per word: ${stats.avgCharsPerWord}

=== MOST COMMON WORDS ===
${stats.mostCommonWords.map(({ word, count }) => `${word}: ${count} times`).join('\n')}

Generated on: ${new Date().toLocaleString()}
`;

    const element = document.createElement('a');
    const file = new Blob([statsText], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = 'word-count-report.txt';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const clearText = () => {
    setText('');
  };

  const sampleTexts = [
    "The quick brown fox jumps over the lazy dog. This pangram contains every letter of the alphabet at least once, making it perfect for testing typography and word counting tools.",
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.",
    "In the digital age, content creation has become increasingly important for businesses and individuals alike. Whether you're writing blog posts, social media content, or academic papers, understanding your text statistics can help improve your writing effectiveness."
  ];

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="mb-8">
          <Link href="/">
            <Button variant="ghost" className="mb-4">
              <ArrowLeftIcon className="h-4 w-4 mr-2" />
              Back to Home
            </Button>
          </Link>
          
          <div className="flex items-center gap-3 mb-4">
            <div className="flex items-center justify-center w-12 h-12 bg-primary/10 rounded-lg">
              <TypeIcon className="h-6 w-6 text-primary" />
            </div>
            <div>
              <h1 className="text-3xl font-bold">Word Counter</h1>
              <p className="text-muted-foreground">Count words, characters, sentences, and more</p>
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2 mb-4">
            <Badge variant="secondary">Real-time Analysis</Badge>
            <Badge variant="secondary">Reading Time</Badge>
            <Badge variant="secondary">Writing Statistics</Badge>
            <Badge variant="secondary">Free Forever</Badge>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Text Input Area */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Enter Your Text</CardTitle>
                <CardDescription>
                  Paste or type your text below to get instant word count and text analysis
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Textarea
                  placeholder="Start typing or paste your text here..."
                  value={text}
                  onChange={(e) => setText(e.target.value)}
                  className="min-h-[400px] text-base leading-relaxed"
                />
                
                {/* Quick Actions */}
                <div className="flex flex-wrap gap-2">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={copyToClipboard}
                    disabled={!text}
                  >
                    <CopyIcon className="h-4 w-4 mr-2" />
                    {copied ? 'Copied!' : 'Copy Text'}
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={downloadAsText}
                    disabled={!text}
                  >
                    <DownloadIcon className="h-4 w-4 mr-2" />
                    Download Text
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={downloadStats}
                    disabled={!text}
                  >
                    <FileTextIcon className="h-4 w-4 mr-2" />
                    Download Report
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={clearText}
                    disabled={!text}
                  >
                    <RefreshCwIcon className="h-4 w-4 mr-2" />
                    Clear
                  </Button>
                </div>

                {/* Sample Text Buttons */}
                <div className="space-y-2">
                  <p className="text-sm text-muted-foreground">Try with sample text:</p>
                  <div className="flex flex-wrap gap-2">
                    {sampleTexts.map((sample, index) => (
                      <Button
                        key={index}
                        variant="ghost"
                        size="sm"
                        onClick={() => setText(sample)}
                        className="text-xs"
                      >
                        Sample {index + 1}
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Statistics Panel */}
          <div className="space-y-6">
            {/* Basic Statistics */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <HashIcon className="h-5 w-5 text-primary" />
                  Text Statistics
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-3 bg-muted/50 rounded-lg">
                    <div className="text-2xl font-bold text-primary">{stats.wordCount}</div>
                    <div className="text-sm text-muted-foreground">Words</div>
                  </div>
                  <div className="text-center p-3 bg-muted/50 rounded-lg">
                    <div className="text-2xl font-bold text-primary">{stats.charactersWithSpaces}</div>
                    <div className="text-sm text-muted-foreground">Characters</div>
                  </div>
                  <div className="text-center p-3 bg-muted/50 rounded-lg">
                    <div className="text-2xl font-bold text-primary">{stats.sentenceCount}</div>
                    <div className="text-sm text-muted-foreground">Sentences</div>
                  </div>
                  <div className="text-center p-3 bg-muted/50 rounded-lg">
                    <div className="text-2xl font-bold text-primary">{stats.paragraphCount}</div>
                    <div className="text-sm text-muted-foreground">Paragraphs</div>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm">Characters (no spaces)</span>
                    <span className="font-medium">{stats.charactersWithoutSpaces}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">Avg. words per sentence</span>
                    <span className="font-medium">{stats.avgWordsPerSentence}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">Avg. characters per word</span>
                    <span className="font-medium">{stats.avgCharsPerWord}</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Reading Time */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ClockIcon className="h-5 w-5 text-primary" />
                  Reading & Speaking Time
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-sm">Reading time</span>
                  <span className="font-medium">
                    {stats.readingTimeMinutes} min {stats.readingTimeSeconds % 60} sec
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Speaking time</span>
                  <span className="font-medium">{stats.speakingTimeMinutes} min</span>
                </div>
                <div className="text-xs text-muted-foreground mt-2">
                  * Based on average reading speed of 200 words/min and speaking speed of 125 words/min
                </div>
              </CardContent>
            </Card>

            {/* Most Common Words */}
            {stats.mostCommonWords.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlignJustifyIcon className="h-5 w-5 text-primary" />
                    Most Common Words
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {stats.mostCommonWords.map(({ word, count }, index) => (
                      <div key={word} className="flex justify-between items-center">
                        <span className="text-sm font-medium">#{index + 1} {word}</span>
                        <Badge variant="outline">{count}</Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>

        {/* Features & FAQ */}
        <div className="mt-12 grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Features */}
          <Card>
            <CardHeader>
              <CardTitle>Features</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2 text-sm">
                <li>✅ Real-time word and character counting</li>
                <li>✅ Sentence and paragraph analysis</li>
                <li>✅ Reading and speaking time estimation</li>
                <li>✅ Most common words analysis</li>
                <li>✅ Download text and statistics report</li>
                <li>✅ Mobile-friendly interface</li>
                <li>✅ No file upload required</li>
                <li>✅ Privacy-first - all processing in browser</li>
              </ul>
            </CardContent>
          </Card>

          {/* FAQ */}
          <Card>
            <CardHeader>
              <CardTitle>Frequently Asked Questions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-medium mb-1">How accurate is the word count?</h4>
                <p className="text-sm text-muted-foreground">
                  Our word counter uses the same algorithm as Microsoft Word, counting words separated by spaces and line breaks.
                </p>
              </div>
              
              <div>
                <h4 className="font-medium mb-1">Is my text stored anywhere?</h4>
                <p className="text-sm text-muted-foreground">
                  No, all text processing happens in your browser. Your text is never uploaded to our servers.
                </p>
              </div>
              
              <div>
                <h4 className="font-medium mb-1">What's the character limit?</h4>
                <p className="text-sm text-muted-foreground">
                  There's no limit! You can analyze texts of any length, from tweets to full documents.
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
